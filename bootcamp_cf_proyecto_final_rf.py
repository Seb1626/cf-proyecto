# -*- coding: utf-8 -*-
"""Bootcamp CF - Proyecto Final - RF.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FvotBqACy4pjEqLdqKrC8iUZaoveZsLV

# 1. Proyecto Final

DICCIONARIO DE VARIABLES:

1. IDHASH: Identificador del alumno
1. COLEGIO: Colegio del alumno
1. COLEGIO_DEPA: Departamento geográfico del colegio
2. COLEGIO_PROV: Provincia del colegio
3. COLEGIO_DIST: Distrito del colegio
4. COLEGIO_PAIS: País donde se ubica el colegio
5. COLEGIO_ANIO_EGRESO: Año de egreso del colegio
6. ESPECIALIDAD: Especialidad a la que postula el alumno
7. ANIO_POSTULA: Año en el que postula el alumno
8. CICLO_POSTULA: Periodo académico en el que postula (1 o 2)
9. DOMICILIO_DEPA: Departamento donde se ubica su domicilio actual
10. DOMICILIO_PROV: Provincia donde reside
11. DOMICILIO_DIST: Distrito donde reside
12. ANIO_NACIMIENTO: Año de nacimiento
13. NACIMIENTO_PAIS: País de nacimiento
14. NACIMIENTO_DEPA: Departamento de nacimiento
15. NACIMIENTO_PROV: Provincia de nacimiento
16. NACIMIENTO_DIST: Distrito de nacimiento
17. SEXO: Sexo del alumno
18. CALIF_FINAL: Calificación obtenida en el ciclo de estudio
19. INGRESO: Determinación booleana de admisión de acuerdo a modalidad
20. MODALIDAD: Modalidad por la cual postuló
21. IDHASH_COUNT: Conteo de veces que ha postulado

## 1.1. Importación de librerías
"""

!pip install altair_viewer

import pandas as pd
import numpy as np
import altair as alt
alt.data_transformers.disable_max_rows()
from altair_viewer import show
import matplotlib.pyplot as plt
import seaborn as sns
import missingno as msno

"""## 1.2. Importación de datos de Google Drive"""

from google.colab import drive
drive.mount('/content/drive')

#Importación de archivos
df_admision = pd.read_csv("/content/drive/MyDrive/Colab Notebooks/Bootcamp CF - Proyecto Final/Datos_abiertos_admision_2021_1_2024_1.csv")

"""## 1.3. Análisis Exploratorio

### Exploración
"""

df_admision.info()

df_admision.head()

"""### Análisis de nulos"""

df_admision.isna().sum().sort_values(ascending = False)

#Visualización de datos faltantes de df_admision
msno.matrix(df_admision)

"""Conclusiones:

* COLEGIO_PAIS tiene muchas variables nulas.

### EDA Variables Categóricas
"""

#Separando las variables categóricas.
admision_cat = df_admision[[
    #"COLEGIO",
    "COLEGIO_DEPA",
    "COLEGIO_PROV",
    "COLEGIO_DIST",
    "COLEGIO_PAIS",
    "ESPECIALIDAD",
    "DOMICILIO_DIST",
    "DOMICILIO_PROV",
    "DOMICILIO_DEPA",
    "NACIMIENTO_PAIS",
    "NACIMIENTO_DEPA",
    "NACIMIENTO_PROV",
    "NACIMIENTO_DIST",
    "SEXO",
    "INGRESO",
    "MODALIDAD"
]]

#Gráficos de barra para conjunto de admision
for column in admision_cat:
  source = admision_cat
  chart = alt.Chart(source).mark_bar().encode(
      x=alt.X('count()', title='Cantidad'),
      y=alt.Y(f'{column}:N', title=column, sort='-x')
  ).properties(
        title=f'Distribución de {column}',
        width=750,
        height=750
    )
  display(chart)

"""Conclusiones:

df_admision
* COLEGIO_PAIS: Imputar por 'PERU'
* ESPECIALIDAD: Imputar por 'SIN ESPECIALIDAD'

### EDA Variables Numéricas
"""

def estadisticos_cont(num):
    #Calculamos describe
    estadisticos = num.describe().round(2).T
    #Añadimos la mediana
    estadisticos['median'] = num.median()
    #Reordenamos para que la mediana esté al lado de la media
    estadisticos = estadisticos.iloc[:,[0,1,8,2,3,4,5,6,7]]
    #Lo devolvemos
    return(estadisticos)

estadisticos_cont(df_admision.select_dtypes('number'))

# Crear boxplots para las variables numéricas de df_admision
for column in df_admision.select_dtypes('number'):
    plt.figure(figsize=(8, 6))
    sns.boxplot(x=df_admision[column])
    plt.title(f'Boxplot de {column} en df_admision')
    plt.show()

"""Conclusiones:
* FECHA_CORTE tiene un solo valor. -> Eliminarla
* CICLO_POSTULA tiene solo 2 valores. -> Concatenar con el año de postulación para obtener mejor distribución de los valores.
* CALIF_FINAL no tiene valores atípicos. -> Utilizar valor de la mediana (7.288) para imputar los valores faltantes ya que es menos susceptible a distorsiones.

##1.4. Acciones con los datos

###Acciones de resolución de data faltante
"""

#Completando nulos en df_admision
df_admision['COLEGIO_PAIS'] = df_admision['COLEGIO_PAIS'].fillna('PERU')
df_admision['ESPECIALIDAD'] = df_admision['ESPECIALIDAD'].fillna('SIN ESPECIALIDAD')
df_admision['CALIF_FINAL'] = df_admision['CALIF_FINAL'].fillna(7.288)

# Completar valores nulos de COLEGIO con NACIMIENTO
df_admision['COLEGIO_PROV'] = df_admision['COLEGIO_PROV'].fillna(df_admision['NACIMIENTO_PROV'])
df_admision['COLEGIO_DIST'] = df_admision['COLEGIO_DIST'].fillna(df_admision['NACIMIENTO_DIST'])
df_admision['COLEGIO_DEPA'] = df_admision['COLEGIO_DEPA'].fillna(df_admision['NACIMIENTO_DEPA'])

# Completar valores nulos de NACIMIENTO con COLEGIO
df_admision['NACIMIENTO_DIST'] = df_admision['NACIMIENTO_DIST'].fillna(df_admision['COLEGIO_DIST'])
df_admision['NACIMIENTO_PROV'] = df_admision['NACIMIENTO_PROV'].fillna(df_admision['COLEGIO_PROV'])
df_admision['NACIMIENTO_DEPA'] = df_admision['NACIMIENTO_DEPA'].fillna(df_admision['COLEGIO_DEPA'])

# En caso de que ambos sean nulos, completar con valores predeterminados
df_admision['COLEGIO_DEPA'].fillna('LIMA', inplace=True)
df_admision['COLEGIO_PROV'].fillna('LIMA', inplace=True)
df_admision['COLEGIO_DIST'].fillna('SAN JUAN DE LURIGANCHO', inplace=True)

df_admision['NACIMIENTO_DEPA'].fillna('LIMA', inplace=True)
df_admision['NACIMIENTO_PROV'].fillna('LIMA', inplace=True)
df_admision['NACIMIENTO_DIST'].fillna('SAN JUAN DE LURIGANCHO', inplace=True)

#Verificando los nulos
df_admision.info()

"""###Verificando los duplicados"""

#Cantidad de postulaciones de una persona de acuerdo a su ID.
N_POSTULACIONES = df_admision.groupby('IDHASH')['IDHASH'].count()
df_admision['IDHASH_COUNT'] = df_admision['IDHASH'].map(N_POSTULACIONES)
df_admision.head()

"""###Otras correcciones"""

#Uniformización de datos

df_admision['COLEGIO_DEPA'] = df_admision['COLEGIO_DEPA'].replace('APURIMAC', 'APURÍMAC')
df_admision['COLEGIO_DEPA'] = df_admision['COLEGIO_DEPA'].replace('ANCASH', 'ÁNCASH')
df_admision['COLEGIO_DEPA'] = df_admision['COLEGIO_DEPA'].replace('HUANUCO', 'HUÁNUCO')
df_admision['COLEGIO_DEPA'] = df_admision['COLEGIO_DEPA'].replace('JUNIN', 'JUNÍN')
df_admision['COLEGIO_DEPA'] = df_admision['COLEGIO_DEPA'].replace('SAN MARTIN', 'SAN MARTÍN')

df_admision['COLEGIO_PAIS'] = df_admision['COLEGIO_PAIS'].replace('PERU', 'PERÚ')
df_admision['NACIMIENTO_PAIS'] = df_admision['NACIMIENTO_PAIS'].replace('PERU', 'PERÚ')

df_admision['NACIMIENTO_DEPA'] = df_admision['NACIMIENTO_DEPA'].replace('APURIMAC', 'APURÍMAC')
df_admision['NACIMIENTO_DEPA'] = df_admision['NACIMIENTO_DEPA'].replace('ANCASH', 'ÁNCASH')
df_admision['NACIMIENTO_DEPA'] = df_admision['NACIMIENTO_DEPA'].replace('HUANUCO', 'HUÁNUCO')
df_admision['NACIMIENTO_DEPA'] = df_admision['NACIMIENTO_DEPA'].replace('JUNIN', 'JUNÍN')
df_admision['NACIMIENTO_DEPA'] = df_admision['NACIMIENTO_DEPA'].replace('SAN MARTIN', 'SAN MARTÍN')

df_admision['DOMICILIO_DEPA'] = df_admision['DOMICILIO_DEPA'].replace('APURIMAC', 'APURÍMAC')
df_admision['DOMICILIO_DEPA'] = df_admision['DOMICILIO_DEPA'].replace('ANCASH', 'ÁNCASH')
df_admision['DOMICILIO_DEPA'] = df_admision['DOMICILIO_DEPA'].replace('HUANUCO', 'HUÁNUCO')
df_admision['DOMICILIO_DEPA'] = df_admision['DOMICILIO_DEPA'].replace('JUNIN', 'JUNÍN')
df_admision['DOMICILIO_DEPA'] = df_admision['DOMICILIO_DEPA'].replace('SAN MARTIN', 'SAN MARTÍN')

df_admision['MODALIDAD'] = df_admision['MODALIDAD'].replace('EXTRAORDINARIO1 - CONVENIO ANDRES BELLO (continuar estudios)', 'EXTRAORDINARIO 1 - CONVENIO ANDRÉS BELLO (continuar estudios)')
df_admision['MODALIDAD'] = df_admision['MODALIDAD'].replace('EXTRAORDINARIO1 - CONVENIO ANDRES BELLO (iniciar estudios)', 'EXTRAORDINARIO 1 - CONVENIO ANDRÉS BELLO (iniciar estudios)')
df_admision['MODALIDAD'] = df_admision['MODALIDAD'].replace('EXTRAORDINARIO 1 - CONVENIO DIPLOMATICO', 'EXTRAORDINARIO 1 - CONVENIO DIPLOMÁTICO')
df_admision['MODALIDAD'] = df_admision['MODALIDAD'].replace('EXTRAORDINARIO1 - DEPORTISTAS CALIFICADOS DE ALTO NIVEL( Iniciar estudios)', 'EXTRAORDINARIO 1 - DEPORTISTAS CALIFICADOS DE ALTO NIVEL( Iniciar estudios)')
df_admision['MODALIDAD'] = df_admision['MODALIDAD'].replace('EXTRAORDINARIO1 - DIPLOMADOS CON BACHILLERATO', 'EXTRAORDINARIO 1 - DIPLOMADOS CON BACHILLERATO')
df_admision['MODALIDAD'] = df_admision['MODALIDAD'].replace('EXTRAORDINARIO1 - DOS PRIMEROS ALUMNOS', 'EXTRAORDINARIO 1 - DOS PRIMEROS ALUMNOS')
df_admision['MODALIDAD'] = df_admision['MODALIDAD'].replace('EXTRAORDINARIO1 - PERSONAS CON DISCAPACIDAD (iniciar estudios)', 'EXTRAORDINARIO 1 - PERSONAS CON DISCAPACIDAD (iniciar estudios)')
df_admision['MODALIDAD'] = df_admision['MODALIDAD'].replace('EXTRAORDINARIO1 - TITULADO O GRADUADO UNI', 'EXTRAORDINARIO 1 - TITULADO O GRADUADO UNI')
df_admision['MODALIDAD'] = df_admision['MODALIDAD'].replace('EXTRAORDINARIO1 - TITULADOS O GRADUADOS', 'EXTRAORDINARIO 1 - TITULADOS O GRADUADOS EN OTRA UNIVERSIDAD')
df_admision['MODALIDAD'] = df_admision['MODALIDAD'].replace('EXTRAORDINARIO1 - TRASLADO EXTERNO', 'EXTRAORDINARIO 1 - TRASLADO EXTERNO')
df_admision['MODALIDAD'] = df_admision['MODALIDAD'].replace('EXTRAORDINARIO1 - TRASLADO EXTERNO PARA ESTUDIANTES PROVENIENTES DE UNIVERSIDADES NO LICENCIADAS', 'EXTRAORDINARIO 1 - TRASLADO EXTERNO PARA ESTUDIANTES PROVENIENTES DE UNIVERSIDADES NO LICENCIADAS')
df_admision['MODALIDAD'] = df_admision['MODALIDAD'].replace('EXTRAORDINARIO1 - VICTIMAS DEL TERRORISMO (continuar estudios)', 'EXTRAORDINARIO - VICTIMA DEL TERRORISMO (continuar estudios)')
df_admision['MODALIDAD'] = df_admision['MODALIDAD'].replace('EXTRAORDINARIO1 - VICTIMAS DEL TERRORISMO (iniciar estudios)', 'EXTRAORDINARIO - VÍCTIMA DEL TERRORISMO (iniciar estudios)')
df_admision['MODALIDAD'] = df_admision['MODALIDAD'].replace('EXTRAORDINARIO2 – INGRESO DIRECTO CEPRE', 'EXTRAORDINARIO INGRESO DIRECTO CEPRE-UNI')
df_admision['MODALIDAD'] = df_admision['MODALIDAD'].replace('EXTRAORDINARIO INGRESO DIRECTO CEPRE-UNI O CEPRE-UNI INTENSIVO', 'EXTRAORDINARIO INGRESO DIRECTO CEPRE-UNI')
df_admision['MODALIDAD'] = df_admision['MODALIDAD'].replace('EXTRAORDINARIO 1 - VICTIMAS DEL TERRORISMO (continuar estudios)', 'EXTRAORDINARIO - VICTIMA DEL TERRORISMO (continuar estudios)')

df_admision['MODALIDAD'] = df_admision['MODALIDAD'].replace('EXTRAORDINARIO 1 - VICTIMAS DEL TERRORISMO (iniciar estudios)', 'EXTRAORDINARIO - VICTIMA DEL TERRORISMO (iniciar estudios)')
df_admision['MODALIDAD'] = df_admision['MODALIDAD'].replace('EXTRAORDINARIO 1 - VÍCTIMA DEL TERRORISMO (iniciar estudios)', 'EXTRAORDINARIO - VÍCTIMA DEL TERRORISMO (iniciar estudios)')
df_admision['MODALIDAD'] = df_admision['MODALIDAD'].replace('EXTRAORDINARIO 1 - VÍCTIMA DEL TERRORISMO (iniciar estudios)', 'EXTRAORDINARIO - VÍCTIMA DEL TERRORISMO (iniciar estudios)')

df_admision['MODALIDAD'] = df_admision['MODALIDAD'].replace('EXTRAORDINARIO 1 - DEPORTISTAS CALIFICADOS DE ALTO NIVEL( Iniciar estudios)', 'EXTRAORDINARIO - DEPORTISTA CALIFICADO DE ALTO NIVEL( Iniciar estudios)')
df_admision['MODALIDAD'] = df_admision['MODALIDAD'].replace('EXTRAORDINARIO 1 - DIPLOMADOS CON BACHILLERATO INTERNACIONAL', 'EXTRAORDINARIO - DIPLOMADO CON BACHILLERATO INTERNACIONAL')
df_admision['MODALIDAD'] = df_admision['MODALIDAD'].replace('EXTRAORDINARIO 1 - DOS PRIMEROS ALUMNOS', 'EXTRAORDINARIO - DOS PRIMEROS ALUMNOS')
df_admision['MODALIDAD'] = df_admision['MODALIDAD'].replace('EXTRAORDINARIO 1 - PERSONAS CON DISCAPACIDAD (iniciar estudios)', 'EXTRAORDINARIO - PERSONA CON DISCAPACIDAD (iniciar estudios)')
df_admision['MODALIDAD'] = df_admision['MODALIDAD'].replace('EXTRAORDINARIO 1 - TITULADOS O GRADUADOS EN OTRA UNIVERSIDAD', 'EXTRAORDINARIO - TITULADOS O GRADUADOS EN OTRA UNIVERSIDAD')
df_admision['MODALIDAD'] = df_admision['MODALIDAD'].replace('EXTRAORDINARIO 1 - TITULADO O GRADUADO UNI', 'EXTRAORDINARIO - TITULADOS O GRADUADOS UNI')
df_admision['MODALIDAD'] = df_admision['MODALIDAD'].replace('EXTRAORDINARIO - TITULADOS O GRADUADOS EN OTRA UNIVERSIDAD', 'EXTRAORDINARIO 1 - TITULADOS O GRADUADOS EN OTRA UNIVERSIDAD')
df_admision['MODALIDAD'] = df_admision['MODALIDAD'].replace('EXTRAORDINARIO 1 - TRASLADO EXTERNO', 'EXTRAORDINARIO - TRASLADO EXTERNO')
df_admision['MODALIDAD'] = df_admision['MODALIDAD'].replace('EXTRAORDINARIO 1 - TRASLADO EXTERNO PARA ESTUDIANTES PROVENIENTES DE UNIVERSIDADES NO LICENCIADAS', 'EXTRAORDINARIO - TRASLADO EXTERNO PARA ESTUDIANTES PROVENIENTES DE UNIVERSIDADES NO LICENCIADAS')
df_admision['MODALIDAD'] = df_admision['MODALIDAD'].replace('EXTRAORDINARIO 1 - CONVENIO ANDRÉS BELLO (continuar estudios)', 'EXTRAORDINARIO - CONVENIO ANDRÉS BELLO (continuar estudios)')
df_admision['MODALIDAD'] = df_admision['MODALIDAD'].replace('EXTRAORDINARIO 1 - CONVENIO ANDRÉS BELLO (iniciar estudios)', 'EXTRAORDINARIO - CONVENIO ANDRÉS BELLO (iniciar estudios)')
df_admision['MODALIDAD'] = df_admision['MODALIDAD'].replace('EXTRAORDINARIO 1 - CONVENIO DIPLOMÁTICO', 'EXTRAORDINARIO - CONVENIO DIPLOMÁTICO')
df_admision['MODALIDAD'] = df_admision['MODALIDAD'].replace('EXTRAORDINARIO 1 - DIPLOMADOS CON BACHILLERATO', 'EXTRAORDINARIO - DIPLOMADOS CON BACHILLERATO')
df_admision['MODALIDAD'] = df_admision['MODALIDAD'].replace('EXTRAORDINARIO 1 - TITULADOS O GRADUADOS EN OTRA UNIVERSIDAD', 'EXTRAORDINARIO - TITULADOS O GRADUADOS EN OTRA UNIVERSIDAD')
df_admision['MODALIDAD'] = df_admision['MODALIDAD'].replace('EXTRAORDINARIO 2 – INGRESO DIRECTO CEPRE', 'EXTRAORDINARIO – INGRESO DIRECTO CEPRE')
df_admision['MODALIDAD'] = df_admision['MODALIDAD'].replace('EXTRAORDINARIO INGRESO DIRECTO CEPRE-UNI', 'EXTRAORDINARIO – INGRESO DIRECTO CEPRE')
df_admision['MODALIDAD'] = df_admision['MODALIDAD'].replace('EXTRAORDINARIO2 - TALENTO BECA 18', 'EXTRAORDINARIO - TALENTO BECA 18')
df_admision['MODALIDAD'] = df_admision['MODALIDAD'].replace('TALENTO BECA 18', 'EXTRAORDINARIO - TALENTO BECA 18')
df_admision['MODALIDAD'] = df_admision['MODALIDAD'].replace('EXTRAORDINARIO', 'EXTRAORDINARIO')
df_admision['MODALIDAD'] = df_admision['MODALIDAD'].replace('EXTRAORDINARIO', 'EXTRAORDINARIO')

# Dataframe ADMISIÓN sin valores IDHASH duplicados
admision_filtro = df_admision.copy()
admision_filtro = admision_filtro.drop_duplicates(subset=['IDHASH'], keep='first')

"""## 1.5. Generación de indicadores

###Cuantificación del problema: ¿cuántos alumnos de admisión ingresan?
"""

admision_filtro.INGRESO.value_counts(normalize = True) * 100

"""###¿Existe un perfil de alumno que ingresa?"""

# Convertir INGRESO a numérica
admision_filtro['INGRESO'] = admision_filtro.INGRESO.map({'SI': 1, 'NO': 0})

"""####ADMISIÓN"""

#Análisis por departamento por colegio para cepre
temp = admision_filtro.groupby('COLEGIO_DEPA').INGRESO.mean().sort_values(ascending = False) * 100
temp.plot.bar();

#Análisis por departamento por año de egreso del colegio
temp = admision_filtro.groupby('COLEGIO_ANIO_EGRESO').INGRESO.mean().sort_values(ascending = False) * 100
temp.plot.bar();

#Análisis por cantidad de postulaciones
temp = admision_filtro.groupby('IDHASH_COUNT').INGRESO.mean().sort_values(ascending = False) * 100
temp.plot.bar();

#Análisis por departamento de residencia
temp = admision_filtro.groupby('DOMICILIO_DEPA').INGRESO.mean().sort_values(ascending = False) * 100
temp.plot.bar();

#Análisis por año de nacimiento
temp = admision_filtro.groupby('ANIO_NACIMIENTO').INGRESO.mean().sort_values(ascending = False) * 100
temp.plot.bar();

#Análisis por modalidad de postulación
temp = admision_filtro.groupby('MODALIDAD').INGRESO.mean().sort_values(ascending = False) * 100
temp.plot.bar();

"""Conclusiones:

El perfil medio del alumno que ingresa es:
* Estudió en un colegio en el departamento de La Libertad; o en su defecto, en Argentina.
* Egresó el colegio en 1974, 1986 y 1994.
* Postuló al menos 2 veces mediante el examen de admisión de la UNI.
* Reside actualmente en La Libertad.
* Nació en 1984 o 1982.
* Modalidad Extraordinaria, por convenio diplomático; o con una carrera ya concluida en la UNI.

###¿Existe correlación entre las variables?
"""

# Calcular la matriz de correlación de Pearson
correlation_matrix = df_admision.select_dtypes(include=np.number).corr(method='pearson')

# Crear un mapa de calor con la matriz de correlación
plt.figure(figsize=(12, 10))
sns.heatmap(correlation_matrix, annot=True, cmap='RdBu', vmin=-1, vmax=1, center=0)
plt.title('Mapa de Correlación de Pearson')

plt.show()

"""## 1.6. Modelo de Machine Learning - Random Forest

* Se eligió el modelo de Random Forest luego de hacer una prueba con un Árbol de Decisión; debido a que este permite predicciones precisas y es menos propenso al sobreajuste, demostró una menor desviación estándar con respecto al árbol.
* El conjunto de datos posee variables categóricas y numéricas, este modelo aprende de las relaciones complejas.
* El modelo permite el manejo para la cantidad de filas de datos que se poseen, se hicieron pruebas con los parámetros que permitían al entorno soportar el entrenamiento y lograr un ajuste óptimo para lograr el objetivo. Si bien se obtuvieron valores conservadores, el modelo logró un ajuste adecuado.

###Copias para modelo
"""

df_ml_admision = admision_filtro.copy()

"""### Preparación de los datos

####Tratamiendo de datos
"""

df_ml_admision = df_ml_admision.reset_index(drop=True)

#Retiro de variables para el modelo
variables_a_eliminar = ['IDHASH','COLEGIO_DIST','DOMICILIO_DIST','NACIMIENTO_DIST','NACIMIENTO_PROV']
df_ml_admision = df_ml_admision.drop(variables_a_eliminar, axis=1)

"""####Transformar las variables categóricas a numéricas"""

#Transformando las variables categóricas a numéricas para ADMISION
from sklearn.preprocessing import OneHotEncoder

#Categóricas
cat_admision = df_ml_admision.select_dtypes('O')

#Instanciamos
ohe_admision = OneHotEncoder(sparse_output = False)

#Entrenamos
ohe_admision.fit(cat_admision)

#Aplicamos
cat_ohe_admision = ohe_admision.transform(cat_admision)

#Ponemos los nombres
cat_ohe_admision = pd.DataFrame(cat_ohe_admision, columns = ohe_admision.get_feature_names_out(input_features = cat_admision.columns)).reset_index(drop = True)

cat_ohe_admision

"""####Dataframes Finales"""

#Selección de las variables numéricas para juntarlas a las cat_hoe
num_admision = admision_filtro.select_dtypes('number').reset_index(drop = True)

#Juntamos todos los dataframe para Admisión
df_ml_admision_final = pd.concat([cat_ohe_admision, num_admision], axis=1).reset_index(drop = True)

"""###Diseño del modelo ADMISIÓN

#### Separación predictoras y target
"""

x_admision = df_ml_admision_final.drop('INGRESO', axis=1)
y_admision = df_ml_admision_final.INGRESO

"""#### Separación train y test"""

from sklearn.model_selection import train_test_split
train_x, test_x, train_y, test_y = train_test_split(x_admision, y_admision, test_size = 0.3)

"""####Entrenamiento del modelo sobre train"""

from sklearn.ensemble import RandomForestClassifier

#Instanciar
rf = RandomForestClassifier(n_estimators=1500, max_depth=25, random_state=50)
#Entrenar
rf.fit(train_x, train_y)

"""#### Predicción y validación sobre test"""

# Predicción
pred = rf.predict_proba(test_x)[:, 1]
pred[:20]

# Evaluación
from sklearn.metrics import roc_auc_score
roc_auc_score(test_y,pred)

"""###Interpretación

####Importancia de las variables
"""

pd.Series(rf.feature_importances_, index=test_x.columns).sort_values(ascending=False).head(10).plot(kind='bar', figsize=(30,20))
plt.title("10 Variables más importantes en el modelo Random Forest")
plt.show()

"""####Incorporación de probabilidad de ingreso a dataframe original

"""

admision_filtro['PROB_INGRESO'] = rf.predict_proba(df_ml_admision_final.drop(columns='INGRESO'))[:, 1]
admision_filtro

"""####10 alumnos con mayor probabilidad de ingresar"""

#Determinación de 10 alumnos con mayor probabilidad de ingresar, que no hayan ingresado hasta el momento.
admision_filtro[admision_filtro.INGRESO == 0].sort_values(by='PROB_INGRESO', ascending=False)[0:10]

"""####Verificación de probabilidades de ingreso"""

#Probabilidad de ingreso para alumnos que no han ingresado aún
admision_filtro[admision_filtro.INGRESO == 0].describe().round(2)

#Probabilidad de ingreso para alumnos que han ingresado
admision_filtro[admision_filtro.INGRESO == 1].describe().round(2)

#Probabilidad de ingreso para todos los alumnos
admision_filtro['PROB_INGRESO'].describe().round(2)

"""####Visualización de probabilidad de ingreso por departamento de residencia"""

#Probabilidad de ingreso por departamento
admision_filtro.boxplot(column='PROB_INGRESO', by='DOMICILIO_DEPA', figsize = (20,12));
plt.xticks(rotation=90);

"""####Descarga de archivo con valores incorporados"""

#Descarga de archivo con valores de probabilidad de ingreso
from google.colab import files

admision_filtro.to_excel('Admision_ingreso_RF.xlsx')
files.download('Admision_ingreso_RF.xlsx')